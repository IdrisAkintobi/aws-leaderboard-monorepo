AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
    AWS Mock Fullstack App - LocalStack Edition
    SAM template for LocalStack deployment using samlocal deploy.

# =======================================================================
# === Parameters ===
# =======================================================================
Parameters:
    ProjectName:
        Type: String
        Default: "aws-leaderboard-app-local"
        Description: A unique name for the project.

    LeaderboardTableName:
        Type: String
        Default: "leaderboard-local"
        Description: Name of the DynamoDB table for scores.

    AllowedOrigin:
        Type: String
        Default: "https://localhost:5173"
        Description: Cors allowed origin.

    StageName:
        Type: String
        Default: "Dev"
        Description: Stage name for API Gateway.

# =======================================================================
# === Globals ===
# =======================================================================
Globals:
    Function:
        Runtime: nodejs20.x
        Timeout: 10
        MemorySize: 128
        Environment:
            Variables:
                AWS_ENDPOINT_URL: "http://localstack:4566"
                AWS_ACCESS_KEY_ID: test
                AWS_SECRET_ACCESS_KEY: test
                AWS_DEFAULT_REGION: ${AWS::Region}
                COGNITO_USER_POOL_ID: !Ref CognitoUserPool
                COGNITO_APP_CLIENT_ID: !Ref CognitoUserPoolClient
                ALLOWED_ORIGIN: !Ref AllowedOrigin
                LEADERBOARD_TABLE_NAME: !Ref LeaderboardTable
                WEBSOCKET_API_ENDPOINT: !Sub "https://${WebSocketApi}.execute-api.localhost.localstack.cloud:4510/${StageName}"
                WS_CONNECTIONS_TABLE_NAME: !Ref ConnectionsTable
        Tracing: Active

# =======================================================================
# === Resources ===
# =======================================================================
Resources:
    # -------------------------------------------------------------------
    # CloudWatch Logging Resources
    # -------------------------------------------------------------------
    
    # IAM Role for API Gateway to write to CloudWatch Logs
    ApiGatewayCloudWatchRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub "${ProjectName}-apigateway-cloudwatch-role"
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - apigateway.amazonaws.com
                      Action:
                          - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

    # API Gateway Account configuration for CloudWatch logging
    ApiGatewayAccount:
        Type: AWS::ApiGateway::Account
        Properties:
            CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

    # CloudWatch Log Groups
    RestApiLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub "/aws/apigateway/${ProjectName}-rest-api"
            RetentionInDays: 14

    WebSocketApiLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub "/aws/apigateway/${ProjectName}-websocket-api"
            RetentionInDays: 14

    # -------------------------------------------------------------------
    # Lambda Functions for API routes (Authorizer functions removed)
    # -------------------------------------------------------------------

    # REST API using API Gateway V2 (HTTP API)
    RestApi:
        Type: AWS::ApiGatewayV2::Api
        Properties:
            Name: !Sub "${ProjectName}-rest-api"
            ProtocolType: HTTP
            CorsConfiguration:
                AllowOrigins:
                    - !Ref AllowedOrigin
                AllowHeaders:
                    - "Content-Type"
                    - "X-Amz-Date"
                    - "Authorization"
                    - "X-Api-Key"
                    - "X-Amz-Security-Token"
                    - "X-WS-Connection-Id"
                AllowMethods:
                    - "POST"
                    - "GET"
                    - "OPTIONS"
                    - "PUT"
                    - "DELETE"
                AllowCredentials: true
                MaxAge: 3600

    RestApiStage:
        Type: AWS::ApiGatewayV2::Stage
        Properties:
            StageName: !Ref StageName
            ApiId: !Ref RestApi
            AutoDeploy: true
            # Enable CloudWatch logging
            AccessLogSettings:
                DestinationArn: !GetAtt RestApiLogGroup.Arn
                Format: >
                    {
                        "requestId": "$context.requestId",
                        "ip": "$context.identity.sourceIp",
                        "requestTime": "$context.requestTime",
                        "httpMethod": "$context.httpMethod",
                        "routeKey": "$context.routeKey",
                        "status": "$context.status",
                        "protocol": "$context.protocol",
                        "responseLength": "$context.responseLength",
                        "responseLatency": "$context.responseLatency",
                        "integrationLatency": "$context.integrationLatency",
                        "integrationStatus": "$context.integrationStatus",
                        "error.message": "$context.error.message",
                        "error.messageString": "$context.error.messageString",
                        "integration.error": "$context.integration.error",
                        "userAgent": "$context.identity.userAgent"
                    }
            DefaultRouteSettings:
                LoggingLevel: INFO
                DataTraceEnabled: true
                MetricsEnabled: true

    # REST API Cognito JWT Authorizer
    RestApiAuthorizer:
        Type: AWS::ApiGatewayV2::Authorizer
        Properties:
            Name: RestApiCognitoAuthorizer
            ApiId: !Ref RestApi
            AuthorizerType: JWT
            JwtConfiguration:
                Audience:
                    - !Ref CognitoUserPoolClient
                Issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"
            IdentitySource:
                - "$request.header.Authorization"

    # Public Routes (No Authorization)
    LoginRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref RestApi
            RouteKey: "POST /auth/login"
            Target: !Sub "integrations/${LoginIntegration}"

    RegisterRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref RestApi
            RouteKey: "POST /auth/register"
            Target: !Sub "integrations/${RegisterIntegration}"

    VerifyRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref RestApi
            RouteKey: "POST /auth/verify"
            Target: !Sub "integrations/${VerifyIntegration}"

    # Protected Route
    LeaderboardRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref RestApi
            RouteKey: "GET /scores/leaderboard"
            AuthorizationType: JWT
            AuthorizerId: !Ref RestApiAuthorizer
            Target: !Sub "integrations/${LeaderboardIntegration}"

    SubmitScoreRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref RestApi
            RouteKey: "POST /scores/submit"
            AuthorizationType: JWT
            AuthorizerId: !Ref RestApiAuthorizer
            Target: !Sub "integrations/${SubmitScoreIntegration}"

    # Integrations
    LoginIntegration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref RestApi
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginFunction.Arn}/invocations"
            PayloadFormatVersion: "2.0"

    RegisterIntegration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref RestApi
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterFunction.Arn}/invocations"
            PayloadFormatVersion: "2.0"

    VerifyIntegration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref RestApi
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VerifyFunction.Arn}/invocations"
            PayloadFormatVersion: "2.0"

    LeaderboardIntegration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref RestApi
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLeaderboardFunction.Arn}/invocations"
            PayloadFormatVersion: "2.0"

    SubmitScoreIntegration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref RestApi
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubmitScoreFunction.Arn}/invocations"
            PayloadFormatVersion: "2.0"

    # -------------------------------------------------------------------
    # Lambda Functions for each API route
    # -------------------------------------------------------------------
    LoginFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./dist
            Handler: handler/auth/login.loginHandler
            Policies:
                - Statement:
                      Effect: Allow
                      Action:
                          - "cognito-idp:*"
                      Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
                - Statement:
                      Effect: Allow
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource: "*"

    RegisterFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./dist
            Handler: handler/auth/register.registerHandler
            Policies:
                - Statement:
                      Effect: Allow
                      Action:
                          - "cognito-idp:*"
                      Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
                - Statement:
                      Effect: Allow
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource: "*"

    VerifyFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./dist
            Handler: handler/auth/verify.verifyHandler
            Policies:
                - Statement:
                      Effect: Allow
                      Action:
                          - "cognito-idp:*"
                      Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
                - Statement:
                      Effect: Allow
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource: "*"

    SubmitScoreFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./dist
            Handler: handler/scores/submit.submitScoreHandler
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref LeaderboardTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref ConnectionsTable
                - Statement:
                      Effect: Allow
                      Action:
                          - "execute-api:ManageConnections"
                      Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"
                - Statement:
                      Effect: Allow
                      Action:
                          - "cognito-idp:*"
                      Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
                - Statement:
                      Effect: Allow
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource: "*"

    GetLeaderboardFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./dist
            Handler: handler/scores/leaderboard.getLeaderboardHandler
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref LeaderboardTable
                - Statement:
                      Effect: Allow
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource: "*"


    # Lambda permissions for API Gateway V2 to invoke functions
    LoginFunctionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt LoginFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*"

    RegisterFunctionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt RegisterFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*"

    VerifyFunctionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt VerifyFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*"

    SubmitScoreFunctionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt SubmitScoreFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*"

    GetLeaderboardFunctionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt GetLeaderboardFunction.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*"


    WebSocketConnectFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./dist
            Handler: handler/ws/connect.connectHandler
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref ConnectionsTable

    WebSocketDisconnectFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./dist
            Handler: handler/ws/disconnect.disconnectHandler
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref ConnectionsTable

    WebSocketDefaultFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./dist
            Handler: handler/ws/default.defaultHandler
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref ConnectionsTable

    # -------------------------------------------------------------------
    # DynamoDB Tables
    # -------------------------------------------------------------------
    ConnectionsTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: !Sub "${ProjectName}-connections"
            AttributeDefinitions:
                - AttributeName: userId
                  AttributeType: S
                - AttributeName: connectionId
                  AttributeType: S
            KeySchema:
                - AttributeName: connectionId
                  KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            GlobalSecondaryIndexes:
                - IndexName: UserIdIndex
                  KeySchema:
                      - AttributeName: userId
                        KeyType: HASH
                  Projection:
                      ProjectionType: ALL

    LeaderboardTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: !Sub "${ProjectName}-${LeaderboardTableName}"
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
                - AttributeName: leaderboard_partition
                  AttributeType: S
                - AttributeName: score
                  AttributeType: N
                - AttributeName: leaderboard_rank_key
                  AttributeType: S
            KeySchema:
                - AttributeName: id
                  KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            GlobalSecondaryIndexes:
                - IndexName: ScoreIndex
                  KeySchema:
                      - AttributeName: leaderboard_partition
                        KeyType: HASH
                      - AttributeName: score
                        KeyType: RANGE
                  Projection:
                      ProjectionType: ALL
                - IndexName: LeaderboardIndex
                  KeySchema:
                      - AttributeName: leaderboard_partition
                        KeyType: HASH
                      - AttributeName: leaderboard_rank_key
                        KeyType: RANGE
                  Projection:
                      ProjectionType: ALL

    # -------------------------------------------------------------------
    # Cognito User Pool
    # -------------------------------------------------------------------
    CognitoUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            UserPoolName: !Sub "${ProjectName}-user-pool"
            UsernameAttributes:
                - email
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireUppercase: false
                    RequireLowercase: false
                    RequireNumbers: false
                    RequireSymbols: false
            Schema:
                - AttributeDataType: String
                  Name: name
                  Required: true
                  Mutable: true
                - AttributeDataType: String
                  Name: email
                  Required: true
                  Mutable: true

    CognitoUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            ClientName: !Sub "${ProjectName}-app-client"
            UserPoolId: !Ref CognitoUserPool
            ExplicitAuthFlows:
                - "USER_PASSWORD_AUTH"
                - "ADMIN_NO_SRP_AUTH"
            GenerateSecret: true
            SupportedIdentityProviders:
                - COGNITO

    # -------------------------------------------------------------------
    # WebSocket API
    # -------------------------------------------------------------------
    # Manual workaround for LocalStack WebSocket bug
    WebSocketApi:
        Type: AWS::ApiGatewayV2::Api
        Properties:
            Name: !Sub "${ProjectName}-websocket-api"
            ProtocolType: WEBSOCKET
            RouteSelectionExpression: "$request.body.action"

    WebSocketStage:
        Type: AWS::ApiGatewayV2::Stage
        Properties:
            StageName: !Ref StageName
            ApiId: !Ref WebSocketApi
            AutoDeploy: true
            # Enable CloudWatch logging for WebSocket API
            AccessLogSettings:
                DestinationArn: !GetAtt WebSocketApiLogGroup.Arn
                Format: >
                    {
                        "requestId": "$context.requestId",
                        "eventType": "$context.eventType",
                        "routeKey": "$context.routeKey",
                        "status": "$context.status",
                        "connectionId": "$context.connectionId",
                        "requestTime": "$context.requestTime",
                        "responseLatency": "$context.responseLatency",
                        "integrationLatency": "$context.integrationLatency",
                        "integrationStatus": "$context.integrationStatus",
                        "error.message": "$context.error.message",
                        "error.messageString": "$context.error.messageString",
                        "integration.error": "$context.integration.error"
                    }
            DefaultRouteSettings:
                LoggingLevel: INFO
                DataTraceEnabled: true
                MetricsEnabled: true

    # Connect route - To handle connection events
    WebSocketRouteConnect:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            RouteKey: "$connect"
            AuthorizationType: NONE
            # AuthorizationType: JWT                            # Will be used when deployed to AWS and update the connect handler
            # AuthorizerId: !Ref WebSocketCognitoAuthorizer     # Auth is currently handled in the connect handler
            ApiId: !Ref WebSocketApi
            OperationName: ConnectRoute
            Target: !Sub "integrations/${WebSocketConnectIntegration}"

    # Disconnect route - To handle disconnection events
    WebSocketRouteDisconnect:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            RouteKey: "$disconnect"
            AuthorizationType: NONE
            ApiId: !Ref WebSocketApi
            OperationName: DisconnectRoute
            Target: !Sub "integrations/${WebSocketDisconnectIntegration}"

    # Default route - To handle all other messages
    WebSocketRouteDefault:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            RouteKey: "$default"
            AuthorizationType: NONE
            ApiId: !Ref WebSocketApi
            OperationName: DefaultRoute
            Target: !Sub "integrations/${WebSocketDefaultIntegration}"

    # Integrations
    WebSocketConnectIntegration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations"
            ApiId: !Ref WebSocketApi

    WebSocketDisconnectIntegration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations"
            ApiId: !Ref WebSocketApi
    
    WebSocketDefaultIntegration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDefaultFunction.Arn}/invocations"
            ApiId: !Ref WebSocketApi

    WebSocketConnectLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt WebSocketConnectFunction.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

    WebSocketDisconnectLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt WebSocketDisconnectFunction.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

    WebSocketDefaultLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt WebSocketDefaultFunction.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

    # WebSocket Cognito JWT Authorizer          # This is not working with localstack
    # WebSocketCognitoAuthorizer:               # Will be used when deployed to AWS and update the connect handler
    #     Type: AWS::ApiGatewayV2::Authorizer
    #     Properties:
    #         Name: WebSocketCognitoAuthorizer
    #         ApiId: !Ref WebSocketApi
    #         AuthorizerType: JWT
    #         JwtConfiguration:
    #             Audience:
    #                 - !Ref CognitoUserPoolClient
    #             Issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"
    #         IdentitySource:
    #             - route.request.querystring.token


# =======================================================================
# === Outputs: Current LocalStack URLs ===
# =======================================================================
Outputs:
    ApiBaseUrl:
        Description: "Base URL for all REST API endpoints"
        Value: !Sub "https://${RestApi}.execute-api.localhost.localstack.cloud:4566/Prod"

    RegisterEndpoint:
        Description: "POST endpoint for user registration"
        Value: !Sub "https://${RestApi}.execute-api.localhost.localstack.cloud:4566/Prod/auth/register"

    LoginEndpoint:
        Description: "POST endpoint for user login"
        Value: !Sub "https://${RestApi}.execute-api.localhost.localstack.cloud:4566/Prod/auth/login"

    VerifyEndpoint:
        Description: "POST endpoint for user verification"
        Value: !Sub "https://${RestApi}.execute-api.localhost.localstack.cloud:4566/Prod/auth/verify"

    SubmitScoreEndpoint:
        Description: "POST endpoint for submitting scores"
        Value: !Sub "https://${RestApi}.execute-api.localhost.localstack.cloud:4566/Prod/scores/submit"

    LeaderboardEndpoint:
        Description: "GET endpoint for retrieving leaderboard"
        Value: !Sub "https://${RestApi}.execute-api.localhost.localstack.cloud:4566/Prod/scores/leaderboard"

    ApiBaseUrlHttp:
        Description: "Base URL for all REST API endpoints (HTTP)"
        Value: !Sub "https://${RestApi}.execute-api.localhost.localstack.cloud:4566/Prod"

    WebSocketUrlSecure:
        Description: "WebSocket URL for real-time communication"
        Value: !Sub "wss://${WebSocketApi}.execute-api.localhost.localstack.cloud:4510/${StageName}"

    RestApiId:
        Description: "REST API Gateway ID"
        Value: !Ref RestApi

    WebSocketApiId:
        Description: "WebSocket API Gateway ID"
        Value: !Ref WebSocketApi

    LeaderboardTableName:
        Description: "DynamoDB Table Name"
        Value: !Sub "${ProjectName}-${LeaderboardTableName}"

    CognitoUserPoolId:
        Description: "Cognito User Pool ID"
        Value: !Ref CognitoUserPool

    CognitoAppClientId:
        Description: "Cognito App Client ID"
        Value: !Ref CognitoUserPoolClient

    LoginFunctionName:
        Description: "Login Lambda Function Name"
        Value: !Ref LoginFunction

    RegisterFunctionName:
        Description: "Register Lambda Function Name"
        Value: !Ref RegisterFunction

    SubmitScoreFunctionName:
        Description: "Submit Score Lambda Function Name"
        Value: !Ref SubmitScoreFunction

    GetLeaderboardFunctionName:
        Description: "Get Leaderboard Lambda Function Name"
        Value: !Ref GetLeaderboardFunction

    RestApiLogGroupName:
        Description: "CloudWatch Log Group for REST API"
        Value: !Ref RestApiLogGroup

    WebSocketApiLogGroupName:
        Description: "CloudWatch Log Group for WebSocket API"
        Value: !Ref WebSocketApiLogGroup
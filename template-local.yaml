AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
    AWS Mock Fullstack App - LocalStack Edition
    SAM template for LocalStack deployment using samlocal deploy.

# =======================================================================
# === Parameters ===
# =======================================================================
Parameters:
    ProjectName:
        Type: String
        Default: "aws-leaderboard-app-local"
        Description: A unique name for the project.

    LeaderboardTableName:
        Type: String
        Default: "leaderboard-local"
        Description: Name of the DynamoDB table for scores.

    AllowedOrigin:
        Type: String
        Default: "http://localhost:5173"
        Description: Cors allowed origin.

# =======================================================================
# === Globals for LocalStack ===
# =======================================================================
Globals:
    Api:
        Cors:
            AllowOrigin: !Ref AllowedOrigin
            AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-WS-Connection-Id'"
            AllowMethods: "'POST,GET,OPTIONS,PUT,DELETE'"
            AllowCredentials: true
            MaxAge: "'3600'"

    Function:
        Runtime: nodejs20.x
        Timeout: 10
        MemorySize: 128
        Environment:
            Variables:
                AWS_ENDPOINT_URL: "http://localstack:4566"
                IS_LOCALSTACK: "true"
                AWS_ACCESS_KEY_ID: test
                AWS_SECRET_ACCESS_KEY: test
                AWS_DEFAULT_REGION: us-east-1
                COGNITO_USER_POOL_ID: !Ref CognitoUserPool
                COGNITO_APP_CLIENT_ID: !Ref CognitoUserPoolClient
                ALLOWED_ORIGIN: !Ref AllowedOrigin
                LEADERBOARD_TABLE_NAME: !Ref LeaderboardTable
                WEBSOCKET_API_ENDPOINT: !Sub "https://://${WebSocketApi}.execute-api.localhost.localstack.cloud:4566/production"
        Tracing: Active

# =======================================================================
# === Resources ===
# =======================================================================
Resources:
    # -------------------------------------------------------------------
    # Lambda Functions for each API route
    # -------------------------------------------------------------------
    LoginFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./
            Handler: dist/handler/authHandler.loginHandler
            Policies:
                - Statement:
                      Effect: Allow
                      Action:
                          - "cognito-idp:*"
                      Resource: !Sub "arn:aws:cognito-idp:us-east-1:000000000000:userpool/*"
                - Statement:
                      Effect: Allow
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource: "*"
            Events:
                LoginApi:
                    Type: Api
                    Properties:
                        Path: /auth/login
                        Method: POST

    RegisterFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./
            Handler: dist/handler/authHandler.registerHandler
            Policies:
                - Statement:
                      Effect: Allow
                      Action:
                          - "cognito-idp:*"
                      Resource: !Sub "arn:aws:cognito-idp:us-east-1:000000000000:userpool/*"
                - Statement:
                      Effect: Allow
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource: "*"
            Events:
                RegisterApi:
                    Type: Api
                    Properties:
                        Path: /auth/register
                        Method: POST

    VerifyFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./
            Handler: dist/handler/authHandler.verifyHandler
            Policies:
                - Statement:
                      Effect: Allow
                      Action:
                          - "cognito-idp:*"
                      Resource: !Sub "arn:aws:cognito-idp:us-east-1:000000000000:userpool/*"
                - Statement:
                      Effect: Allow
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource: "*"
            Events:
                VerifyApi:
                    Type: Api
                    Properties:
                        Path: /auth/verify
                        Method: POST

    SubmitScoreFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./
            Handler: dist/handler/scoreHandler.submitScoreHandler
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref LeaderboardTable
                - Statement:
                      Effect: Allow
                      Action:
                          - "execute-api:ManageConnections"
                      Resource: !Sub "arn:aws:execute-api:us-east-1:000000000000:${WebSocketApi}/*"
                - Statement:
                      Effect: Allow
                      Action:
                          - "cognito-idp:*"
                      Resource: !Sub "arn:aws:cognito-idp:us-east-1:000000000000:userpool/*"
                - Statement:
                      Effect: Allow
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource: "*"
            Events:
                SubmitScoreApi:
                    Type: Api
                    Properties:
                        Path: /scores/submit
                        Method: POST

    GetLeaderboardFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./
            Handler: dist/handler/scoreHandler.getLeaderboardHandler
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Ref LeaderboardTable
                - Statement:
                      Effect: Allow
                      Action:
                          - "logs:CreateLogGroup"
                          - "logs:CreateLogStream"
                          - "logs:PutLogEvents"
                      Resource: "*"
            Events:
                GetLeaderboardApi:
                    Type: Api
                    Properties:
                        Path: /scores/leaderboard
                        Method: GET

    # -------------------------------------------------------------------
    # DynamoDB Table
    # -------------------------------------------------------------------
    LeaderboardTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: !Ref LeaderboardTableName
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
                - AttributeName: leaderboard_partition
                  AttributeType: S
                - AttributeName: score
                  AttributeType: N
            KeySchema:
                - AttributeName: id
                  KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            GlobalSecondaryIndexes:
                - IndexName: ScoreIndex
                  KeySchema:
                      - AttributeName: leaderboard_partition
                        KeyType: HASH
                      - AttributeName: score
                        KeyType: RANGE
                  Projection:
                      ProjectionType: ALL

    # -------------------------------------------------------------------
    # Cognito User Pool
    # -------------------------------------------------------------------
    CognitoUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            UserPoolName: !Sub "${ProjectName}-user-pool"
            UsernameAttributes:
                - email
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireUppercase: false
                    RequireLowercase: false
                    RequireNumbers: false
                    RequireSymbols: false
            Schema:
                - AttributeDataType: String
                  Name: name
                  Required: true
                  Mutable: true
                - AttributeDataType: String
                  Name: email
                  Required: true
                  Mutable: true

    CognitoUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            ClientName: !Sub "${ProjectName}-app-client"
            UserPoolId: !Ref CognitoUserPool
            ExplicitAuthFlows:
                - "USER_PASSWORD_AUTH"
                - "ADMIN_NO_SRP_AUTH"
            GenerateSecret: true
            SupportedIdentityProviders:
                - COGNITO

    # -------------------------------------------------------------------
    # WebSocket API
    # -------------------------------------------------------------------
    WebSocketApi:
        Type: AWS::ApiGatewayV2::Api
        Properties:
            Name: !Sub "${ProjectName}-websocket-api"
            ProtocolType: WEBSOCKET
            RouteSelectionExpression: "$request.body.action"

    WebSocketStage:
        Type: AWS::ApiGatewayV2::Stage
        Properties:
            StageName: production
            ApiId: !Ref WebSocketApi
            AutoDeploy: true

    WebSocketRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            RouteKey: "$default"
            AuthorizationType: NONE
            ApiId: !Ref WebSocketApi
            Target: !Sub "integrations/${WebSocketIntegration}"

    WebSocketIntegration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            IntegrationType: AWS_PROXY
            IntegrationUri: !Sub "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${LoginFunction.Arn}/invocations"
            ApiId: !Ref WebSocketApi

    WebSocketLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LoginFunction.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:us-east-1:000000000000:${WebSocketApi}/*"

# =======================================================================
# === Outputs: Current LocalStack URLs (Non-deprecated) ===
# =======================================================================
Outputs:
    # Base API URL for LocalStack - CURRENT FORMAT
    ApiBaseUrl:
        Description: "Base URL for all REST API endpoints"
        Value: !Sub "https://${ServerlessRestApi}.execute-api.localhost.localstack.cloud:4566/Prod"

    # Individual API Endpoints - CURRENT FORMAT
    RegisterEndpoint:
        Description: "POST endpoint for user registration"
        Value: !Sub "https://${ServerlessRestApi}.execute-api.localhost.localstack.cloud:4566/Prod/auth/register"

    LoginEndpoint:
        Description: "POST endpoint for user login"
        Value: !Sub "https://${ServerlessRestApi}.execute-api.localhost.localstack.cloud:4566/Prod/auth/login"

    SubmitScoreEndpoint:
        Description: "POST endpoint for submitting scores"
        Value: !Sub "https://${ServerlessRestApi}.execute-api.localhost.localstack.cloud:4566/Prod/scores/submit"

    LeaderboardEndpoint:
        Description: "GET endpoint for retrieving leaderboard"
        Value: !Sub "https://${ServerlessRestApi}.execute-api.localhost.localstack.cloud:4566/Prod/scores/leaderboard"

    # Alternative HTTP format (if HTTPS doesn't work in your setup)
    ApiBaseUrlHttp:
        Description: "Base URL for all REST API endpoints (HTTP)"
        Value: !Sub "http://${ServerlessRestApi}.execute-api.localhost.localstack.cloud:4566/Prod"

    # WebSocket API - CURRENT FORMAT
    WebSocketUrl:
        Description: "WebSocket API URL for real-time communication"
        Value: !Sub "wss://${WebSocketApi}.execute-api.localhost.localstack.cloud:4566/production"

    # Resource IDs for reference
    RestApiId:
        Description: "REST API Gateway ID"
        Value: !Ref ServerlessRestApi

    WebSocketApiId:
        Description: "WebSocket API Gateway ID"
        Value: !Ref WebSocketApi

    # AWS Resource Information
    LeaderboardTableName:
        Description: "DynamoDB Table Name"
        Value: !Ref LeaderboardTable

    CognitoUserPoolId:
        Description: "Cognito User Pool ID"
        Value: !Ref CognitoUserPool

    CognitoAppClientId:
        Description: "Cognito App Client ID"
        Value: !Ref CognitoUserPoolClient

    # Lambda Function Names
    LoginFunctionName:
        Description: "Login Lambda Function Name"
        Value: !Ref LoginFunction

    RegisterFunctionName:
        Description: "Register Lambda Function Name"
        Value: !Ref RegisterFunction

    SubmitScoreFunctionName:
        Description: "Submit Score Lambda Function Name"
        Value: !Ref SubmitScoreFunction

    GetLeaderboardFunctionName:
        Description: "Get Leaderboard Lambda Function Name"
        Value: !Ref GetLeaderboardFunction

    # Complete endpoint summary with current URLs
    EndpointSummary:
        Description: "All available API endpoints with current LocalStack URLs"
        Value: !Sub |
            REST API Base (HTTPS): https://${ServerlessRestApi}.execute-api.localhost.localstack.cloud:4566/Prod
            REST API Base (HTTP):  http://${ServerlessRestApi}.execute-api.localhost.localstack.cloud:4566/Prod

            Available Endpoints:
            POST https://${ServerlessRestApi}.execute-api.localhost.localstack.cloud:4566/Prod/auth/register
            POST https://${ServerlessRestApi}.execute-api.localhost.localstack.cloud:4566/Prod/auth/login
            POST https://${ServerlessRestApi}.execute-api.localhost.localstack.cloud:4566/Prod/auth/verify
            POST https://${ServerlessRestApi}.execute-api.localhost.localstack.cloud:4566/Prod/scores/submit
            GET  https://${ServerlessRestApi}.execute-api.localhost.localstack.cloud:4566/Prod/scores/leaderboard

            WebSocket: wss://${WebSocketApi}.execute-api.localhost.localstack.cloud:4566/production
